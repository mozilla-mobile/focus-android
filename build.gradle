// Top-level build file where you can add configuration options common to all sub-projects/modules.

import org.mozilla.focus.gradle.tasks.GithubDetailsTask

buildscript {
    ext.espresso_version = '3.4.0'
    ext.coroutines_version = '1.4.2'
    ext.jna_version = "5.8.0"
    // Pinning the last working version of the service-telemetry component until we decide
    // what we want to do with telemetry in the app.
    ext.mozilla_components_version_telemetry = '57.0.9'

    repositories {
        google()
        mavenCentral()
        maven {
            // We will always need this repository for retrieving stable dependencies (like Glean).
            url "https://maven.mozilla.org/maven2"
        }
        maven {
            url "https://nightly.maven.mozilla.org/maven2"
        }
    }

    dependencies {
        classpath Dependencies.android_gradle_plugin
        classpath Dependencies.kotlin_gradle_plugin
        classpath "org.mozilla.components:tooling-glean-gradle:${AndroidComponents.VERSION}"
        classpath "org.mozilla.components:tooling-nimbus-gradle:${AndroidComponents.VERSION}"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    // The version number is duplicated in the detekt block. We are unable to use constants due to
    // limitations of the gradle plugin. We've decided to stick with duplication for now since the
    // other methods involve using undocumented APIs
    // https://docs.gradle.org/current/userguide/plugins.html#plugins_dsl_limitations
    id("io.gitlab.arturbosch.detekt").version("1.18.0")
}

detekt {
    // The version number is duplicated, please refer to plugins block for more details
    version = "1.18.0"
    buildUponDefaultConfig = true
    input = files("$projectDir/app")
    config = files("$projectDir/quality/detekt.yml")
    baseline = file("$projectDir/quality/detekt-baseline.xml")

    reports {
        html {
            enabled = true
            destination = file("$projectDir/build/reports/detekt.html")
        }
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        maven {
            url "https://nightly.maven.mozilla.org/maven2"
        }
        maven {
            url "https://maven.mozilla.org/maven2"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


configurations {
    ktlint
}

dependencies {
    ktlint("com.pinterest:ktlint:0.46.1") {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
        }
    }
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "app/**/*.kt", "!**/build/**/*.kt", "buildSrc/**/*.kt"
}


task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "app/**/*.kt", "!**/build/**/*.kt", "buildSrc/**/*.kt"
}

tasks.register("githubTestDetails", GithubDetailsTask) {
    text = "### [Unit Test Results]({reportsUrl}/test/testFocusDebugUnitTest/index.html)"
}

tasks.register("githubLintDetektDetails", GithubDetailsTask) {
    text = "### [Detekt Results]({reportsUrl}/detekt.html)"
}

tasks.register("githubLintAndroidDetails", GithubDetailsTask) {
    text = "### [Android Lint Results]({reportsUrl}/lint-results-debug.html)"
}
