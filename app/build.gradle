apply plugin: 'com.android.application'
apply plugin: 'findbugs'
apply plugin: 'jacoco'
apply plugin: 'jacoco-android'
apply plugin: 'pmd'
apply plugin: 'checkstyle'

apply from: "$project.rootDir/tools/gradle/versionCode.gradle"

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"
    defaultConfig {
        applicationId "org.mozilla"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 11 // This versionCode is "frozen" for local builds. For "release" builds we
                       // override this with a generated versionCode at build time.
        versionName "2.2"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }

    aaptOptions {
        cruncherEnabled = false
    }

    dexOptions {
        preDexLibraries true
    }

    // We have a three dimensional build configuration:
    // BUILD TYPE (debug, beta, release) X PRODUCT FLAVOR (focus, klar) X ENGINE FLAVOR (webview, gecko)

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        beta {
            initWith debug
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".beta"
        }
        debug {
            applicationIdSuffix ".debug"
        }
        // Use a separate buildType for coverage: testCoverageEnabled produces slower code (4-5x slower
        // in places that I've benchmarked), and more importantly seems to break debugging with Android Studio
        // for some developers (i.e. variables can't be inspected or seen).
        coverage {
            initWith debug

            applicationIdSuffix ".coverage"
            testCoverageEnabled true
        }
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    flavorDimensions "product", "engine"

    productFlavors {
        // In most countries we are Firefox Focus - but in some we need to be Firefox Klar
        focus {
            dimension "product"

            applicationIdSuffix ".focus"
        }
        klar {
            dimension "product"

            applicationIdSuffix ".klar"
        }

        // We can build with two engines: webview or gecko
        webview {
            dimension "engine"
        }

        gecko {
            dimension "engine"

            applicationIdSuffix ".gecko"
        }
    }

    variantFilter { variant ->
        def flavors = variant.flavors*.name
        // We only need a gecko debug and beta build for now.
        if (flavors.contains("gecko") && ((variant.buildType.name != "debug" && variant.buildType.name != "beta") || flavors.contains("klar"))) {
            setIgnore(true)
        }
    }

    sourceSets {
        test {
            resources {
                // Make the default asset folder available as test resource folder. Robolectric seems
                // to fail to read assets for our setup. With this we can just read the files directly
                // and do not need to rely on Robolectric.
                srcDir "${projectDir}/src/main/assets/"
            }
        }

        focusWebviewRelease {
            java.srcDir 'src/focusRelease/java'
            manifest.srcFile 'src/focusRelease/AndroidManifest.xml'
            res.srcDir 'src/focusRelease/res'
        }
        klarWebviewRelease {
            java.srcDir 'src/klarRelease/java'
            res.srcDir 'src/klarRelease/res'
        }
        focusWebviewBeta {
            res.srcDir 'src/focusBeta/res'
        }
        klarWebviewBeta {
            res.srcDir 'src/klarBeta/res'
        }
        focusWebviewDebug {
            res.srcDir 'src/focusDebug/res'
        }
        klarWebviewDebug {
            res.srcDir 'src/klarDebug/res'
        }
    }
}

jacocoAndroidUnitTestReport {
    csv.enabled false
    html.enabled true
    xml.enabled true
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile "com.android.support:appcompat-v7:$support_libraries_version"
    compile "com.android.support:customtabs:$support_libraries_version"
    compile "com.android.support:design:$support_libraries_version"
    compile "com.android.support:cardview-v7:$support_libraries_version"
    compile "com.android.support:recyclerview-v7:$support_libraries_version"
    compile 'me.dm7.barcodescanner:zxing:1.9.8'

    compile "android.arch.lifecycle:runtime:1.0.0-alpha9"
    compile "android.arch.lifecycle:extensions:1.0.0-alpha9"
    annotationProcessor "android.arch.lifecycle:compiler:1.0.0-alpha9"

    compile ("com.google.code.findbugs:annotations:3.0.1") {
        // We really only need the SuppressFBWarnings annotation, everything else can be ignored.
        // Without this we get weird failures due to dependencies.
        transitive = false
    }

    compile 'org.mozilla.telemetry:telemetry:1.1.1'

    focusCompile 'com.adjust.sdk:adjust-android:4.11.4'
    focusCompile 'com.google.android.gms:play-services-analytics:10.2.6' // Required by Adjust

    geckoCompile(name: 'geckoview-latest', ext: 'aar')

    testCompile 'junit:junit:4.12'
    testCompile "org.robolectric:robolectric:3.4.2"
    testCompile 'org.mockito:mockito-core:2.7.22'

    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'

    androidTestCompile "com.android.support.test.espresso:espresso-core:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestCompile "com.android.support.test.espresso:espresso-idling-resource:$espresso_version"
    androidTestCompile "com.android.support.test.espresso:espresso-web:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }

    androidTestCompile 'com.squareup.okhttp3:mockwebserver:3.7.0'

    androidTestCompile "tools.fastlane:screengrab:1.1.0", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

// -------------------------------------------------------------------------------------------------
//  Dynamically set versionCode (See tools/build/versionCode.gradle
// -------------------------------------------------------------------------------------------------

android.applicationVariants.all { variant ->
    def buildType = variant.buildType.name
    def isBetaOrRelease = buildType == "release" || buildType == "beta"

    if (isBetaOrRelease) {
        variant.mergedFlavor.versionCode = generatedVersionCode
    }

    println("Build type: " + buildType + " (versionCode = " + variant.mergedFlavor.versionCode + ")")
}

// -------------------------------------------------------------------------------------------------
// Generate blocklists
// -------------------------------------------------------------------------------------------------

def blockListOutputDir = 'src/webview/res/raw'

task buildBlocklists(type:Copy) {
    from('../shavar-prod-lists') {
        include '*.json'
    }
    into blockListOutputDir

    // Android can't handle dashes in the filename, so we need to rename:
    rename 'disconnect-blacklist.json', 'blocklist.json'
    rename 'disconnect-entitylist.json', 'entitylist.json'
    // google_mapping.json already has an expected name
}

clean.doLast {
    file(blockListOutputDir).deleteDir()
}

tasks.whenTaskAdded { task ->
    def name = task.name
    if (name.contains("generate") && name.contains("Config") && name.contains("Webview")) {
        task.dependsOn buildBlocklists
    }
}

// -------------------------------------------------------------------------------------------------
// Adjust: Read token from environment variable (Only release builds)
// -------------------------------------------------------------------------------------------------

android.applicationVariants.all { variant ->
    def variantName = variant.getName()

    print("Adjust token (" + variantName + "): ")

    if (variantName.contains("Release") && variantName.contains("focus")) {
        def token = System.getenv("ADJUST_TOKEN_FOCUS") ?: null

        if (token != null) {
            buildConfigField 'String', 'ADJUST_TOKEN', '"' + token + '"'
            println "(Added from environment variable)"
        } else {
            buildConfigField 'String', 'ADJUST_TOKEN', 'null'
            println("X_X")
        }
    } else {
        buildConfigField 'String', 'ADJUST_TOKEN', 'null'
        println("--")
    }
}

// -------------------------------------------------------------------------------------------------
// L10N: Initialize Strings
// -------------------------------------------------------------------------------------------------

task stringsSetup(type:Exec) {
    group = 'Localization'
    description = 'Setup L10N repository for importing and exporting strings.'

    workingDir '..'

    commandLine 'git', 'clone', 'https://github.com/mozilla-l10n/focus-android-l10n.git', 'l10n-repo'
}

// -------------------------------------------------------------------------------------------------
// L10N: Export Strings
// -------------------------------------------------------------------------------------------------

task stringsExport(type:Exec) {
    group = 'Localization'
    description = 'Export strings to L10N repository.'

    workingDir '..'

    commandLine 'python', 'tools/l10n/android2po/a2po.py', 'export'
}

// -------------------------------------------------------------------------------------------------
// L10N: Import Strings
// -------------------------------------------------------------------------------------------------

task stringsImport {
    group = 'Localization'
    description = 'Import strings from L10N repository.'

    doLast {
        exec {
            workingDir '..'
            commandLine 'python', 'tools/l10n/android2po/a2po.py', 'import'
        }
        exec {
            workingDir '../tools/l10n/'
            commandLine 'sh', 'fix_locale_folders.sh'
        }
    }
}

// -------------------------------------------------------------------------------------------------
// L10N: Create commits
// -------------------------------------------------------------------------------------------------

task stringsCommit(type:Exec) {
    group = 'Localization'
    description = 'Create commits for exported strings.'

    workingDir '../tools/l10n/'

    commandLine 'sh', 'create_commits.sh'
}

// -------------------------------------------------------------------------------------------------
// L10N: Clean and update
// -------------------------------------------------------------------------------------------------

task stringsCleanUpdate()  {
    group = 'Localization'
    description = 'Fetch L10N changes and remove all local modifications.'

    doLast {
        exec {
            workingDir '../l10n-repo/'
            commandLine 'git', 'fetch', 'origin'

        }
        exec {
            workingDir '../l10n-repo/'
            commandLine 'git', 'reset', '--hard', 'origin/master'
        }
    }
}

// -------------------------------------------------------------------------------------------------
// L10N: Generate list of locales
// Focus provides its own (Android independent) locale switcher. That switcher requires a list
// of locale codes. We generate that list here to avoid having to manually maintain a list of locales:
// -------------------------------------------------------------------------------------------------

def getEnabledLocales() {
    def resDir = file('src/main/res')

    def potentialLanguageDirs = resDir.listFiles(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.startsWith("values-");
        }
    })

    def langs = potentialLanguageDirs.findAll {
        // Only select locales where strings.xml exists
        // Some locales might only contain e.g. sumo URLS in urls.xml, and should be skipped (see es vs es-ES/es-MX/etc)
        return  file(new File(it, "strings.xml")).exists()
    } .collect {
        // And reduce down to actual values-* names
        return it.name
    } .collect {
        return it.substring("values-".length())
    } .collect {
        if (it.length() > 3 && it.contains("-r")) {
            // Android resource dirs add an "r" prefix to the region - we need to strip that for java usage
            // Add 1 to have the index of the r, without the dash
            def regionPrefixPosition = it.indexOf("-r") + 1

            return it.substring(0, regionPrefixPosition) + it.substring(regionPrefixPosition + 1)
        } else {
            return it
        }
    } .collect {
        return '"' + it + '"'
    }

    // en-US is the default language (in "values") and therefore needs to be added separately
    langs << "\"en-US\""

    return langs
}

def generatedLocaleListDir = 'src/main/java/org/mozilla/focus/generated'
def generatedLocaleListFilename = 'LocaleList.java'

task generateLocaleList {
    doLast {
        def dir = file(generatedLocaleListDir)
        dir.mkdir()
        def localeList = file(new File(dir, generatedLocaleListFilename))

        localeList.delete()
        localeList.createNewFile()
        localeList << "package org.mozilla.focus.generated;" << "\n" << "\n"
        localeList << "import java.util.Arrays;" << "\n"
        localeList << "import java.util.Collections;" << "\n"
        localeList << "import java.util.List;" << "\n"
        localeList << "\n"
        localeList << "public class LocaleList {" << "\n"
        // findbugs doesn't like "public static final String[]", see http://findbugs.sourceforge.net/bugDescriptions.html#MS_MUTABLE_ARRAY
        localeList << "    public static final List<String> BUNDLED_LOCALES = Collections.unmodifiableList(Arrays.asList(new String[] { "
        localeList << getEnabledLocales().join(", ") + " }));" << "\n"
        localeList << "}" << "\n"
    }
}

tasks.whenTaskAdded { task ->
    if (name.contains("compile")) {
        task.dependsOn generateLocaleList
    }
}

clean.doLast {
    file(generatedLocaleListDir).deleteDir()
}

// -------------------------------------------------------------------------------------------------
// L10N: Verify locales
// -------------------------------------------------------------------------------------------------

// Fetches the available locales - this doesn't always match the actually available locales (getEnabledLocales()),
// e.g. if there were import problems:
def getTranslatedLocales() {
    def localesDir = file('../l10n-repo/locales')

    def potentialLanguageDirs = localesDir.listFiles(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return !name.equals("templates");
        }
    })

    def langs = potentialLanguageDirs.collect {
        // Reduce from list of files to actual names
        return it.name
    } .collect {
        switch(it) {
            case "id":
                return "in"
            case "he":
                return "iw"
            default:
                return it;
        }
    } .collect {
        return '"' + it + '"'
    }

    langs << "\"en-US\""

    return langs
}

task verifyLocales << {
    group = 'Localization'
    description = 'Verify that all locales in the L10N repository were imported'

    def l10nRepo = file("../l10n-repo")
    if (!l10nRepo.isDirectory()) {
        throw new GradleException('l10n-repo does not exist, ensure you have run |gradle stringsSetup|')
    }

    def availableLocales = getTranslatedLocales()
    def successfullyImportedLocales = getEnabledLocales()

    def missingLocales = availableLocales.clone()
    missingLocales.removeAll(successfullyImportedLocales)

    if (missingLocales.size > 0) {
        throw new GradleException('The following locales were not successfully imported: ' + missingLocales.join(","))
    }

    def unexpectedLocales = successfullyImportedLocales.clone()
    unexpectedLocales.removeAll(availableLocales)

    if (unexpectedLocales.size > 0) {
        throw new GradleException('Project has additional locales: ' + unexpectedLocales.join(","))
    }
}

// Ensure we always check locale import imported all locales:
stringsImport.doLast {
    tasks.verifyLocales.execute()
}

// -------------------------------------------------------------------------------------------------
// Static Analysis: findbugs and pmd
// -------------------------------------------------------------------------------------------------

findbugs {
    ignoreFailures = false

    effort = "max"
    // This selects what level of bugs to report: low means low priority issues will be reported
    // (in addition to medium+high), which corresponds to warning about everything.
    // TODO: boost this to low once low priority issues are fixed.
    reportLevel = "medium"

    excludeFilter = new File("${project.rootDir}/quality/findbugs-exclude.xml")
}

task findbugs(type: FindBugs, dependsOn: "assemble", group: 'verification') {
    classes = files("$projectDir.absolutePath/build/intermediates/classes")

    source = fileTree('src/main/java')
    classpath = files()

    // Only one report format is supported. Html is easier to read, so let's use that
    // (xml is the one that's enabled by default).
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    toolVersion = '5.5.2'
    ignoreFailures = true
    ruleSetFiles = files("${project.rootDir}/quality/pmd-rules.xml")
    ruleSets = []
}

task pmd(type: Pmd, group: 'verification') {
    source 'src'
    include '**/*.java'
    exclude('**/gen/**',
            '**/debug/**',
            '**/androidTest/**',
            '**/test**/**')

    reports {
        xml.enabled = false
        html.enabled = true
        html {
            destination "$projectDir.absolutePath/build/reports/pmd/pmd.html"
        }
    }
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/quality/checkstyle.xml")
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
}

afterEvaluate {
    check.dependsOn 'findbugs', 'pmd', 'checkstyle'
}