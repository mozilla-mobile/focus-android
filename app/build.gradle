apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco'
apply plugin: 'kotlin-android-extensions'
apply from: "$project.rootDir/tools/gradle/versionCode.gradle"

import com.android.build.OutputFile

android {
    compileSdkVersion 29
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "org.mozilla"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 11 // This versionCode is "frozen" for local builds. For "release" builds we
                       // override this with a generated versionCode at build time.
        versionName "8.13.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        multiDexEnabled true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        preDexLibraries true
    }

    lintOptions {
        lintConfig file("lint.xml")
    }

    // We have a three dimensional build configuration:
    // BUILD TYPE (debug, release) X PRODUCT FLAVOR (focus, klar)

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"
        }
        nightly {
            initWith release
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    flavorDimensions "product"

    productFlavors {
        // In most countries we are Firefox Focus - but in some we need to be Firefox Klar
        focus {
            dimension "product"

            applicationIdSuffix ".focus"
        }
        klar {
            dimension "product"

            applicationIdSuffix ".klar"
        }
    }

    splits {
        abi {
            enable true

            reset()

            include "x86", "armeabi-v7a", "arm64-v8a", "x86_64"
        }
    }

    sourceSets {
        test {
            resources {
                // Make the default asset folder available as test resource folder. Robolectric seems
                // to fail to read assets for our setup. With this we can just read the files directly
                // and do not need to rely on Robolectric.
                srcDir "${projectDir}/src/main/assets/"
            }
        }

        // Release
        focusRelease.root = 'src/focusRelease'
        klarRelease.root = 'src/klarRelease'

        // Debug
        focusDebug.root = 'src/focusDebug'
        klarDebug.root = 'src/klarDebug'

        // Nightly
        focusNightly.root = 'src/focusNightly'
        klarNightly.root = 'src/klarNightly'
    }

    packagingOptions {
        pickFirst 'META-INF/atomicfu.kotlin_module'
        pickFirst 'META-INF/proguard/coroutines.pro'
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
            allWarningsAsErrors = true
            freeCompilerArgs += "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi"
        }
}

dependencies {
    implementation "androidx.appcompat:appcompat:$support_libraries_version"
    implementation "androidx.browser:browser:$support_libraries_version"
    implementation "androidx.core:core-ktx:1.1.0"
    implementation "com.google.android.material:material:$support_libraries_version"
    implementation "androidx.cardview:cardview:$support_libraries_version"
    implementation "androidx.recyclerview:recyclerview:$support_libraries_version"
    implementation "androidx.legacy:legacy-support-v4:$support_libraries_version"
    implementation "androidx.preference:preference:$support_libraries_version"
    implementation 'io.sentry:sentry-android:1.7.21'

    implementation "androidx.lifecycle:lifecycle-extensions:$architecture_components_version"

    compileOnly 'net.jcip:jcip-annotations:1.0'
    implementation("com.google.code.findbugs:jsr305:3.0.2")

    implementation "org.mozilla.components:browser-engine-gecko:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:browser-domains:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:browser-errorpages:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:browser-search:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:browser-session:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:browser-state:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:concept-engine:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:concept-fetch:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-app-links:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-customtabs:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-contextmenu:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-downloads:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-findinpage:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-prompts:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-session:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-search:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:feature-tabs:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:lib-crash:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:service-telemetry:$mozilla_components_version_telemetry"
    implementation "org.mozilla.components:service-location:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:support-ktx:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:support-utils:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:ui-autocomplete:${AndroidComponents.VERSION}"
    implementation "org.mozilla.components:ui-colors:${AndroidComponents.VERSION}"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${coroutines_version}"

    focusImplementation 'com.adjust.sdk:adjust-android:4.11.4'
    focusImplementation 'com.android.installreferrer:installreferrer:1.1' // Required by Adjust

    implementation "androidx.palette:palette:$support_libraries_version"

    testImplementation "org.junit.jupiter:junit-jupiter-api:5.3.1"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.1"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.3.1"
    testImplementation "junit:junit:4.12"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.3.1"
    testImplementation "org.robolectric:robolectric:4.4" // required to support api level 28
    testImplementation 'org.mockito:mockito-core:2.24.5'
    testImplementation "androidx.arch.core:core-testing:${architecture_components_version}"

    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "androidx.test.espresso:espresso-idling-resource:$espresso_version"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espresso_version", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_version"

    androidTestImplementation 'com.squareup.okhttp3:mockwebserver:3.11.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.11.0'
    testImplementation "org.mozilla.components:lib-fetch-okhttp:${AndroidComponents.VERSION}"

    androidTestImplementation "tools.fastlane:screengrab:2.0.0", {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.1.0-alpha4', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'recyclerview-v7'
    }
    testImplementation 'androidx.test:core:1.2.0'
    testImplementation 'androidx.test:runner:1.2.0'
    testImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'

    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
}
// -------------------------------------------------------------------------------------------------
//  Dynamically set versionCode (See tools/build/versionCode.gradle
// -------------------------------------------------------------------------------------------------

android.applicationVariants.all { variant ->
    def buildType = variant.buildType.name

    println("----------------------------------------------")
    println("Variant name:      " + variant.name)
    println("Application ID:    " + [variant.mergedFlavor.applicationId, variant.buildType.applicationIdSuffix].findAll().join())
    println("Build type:        " + variant.buildType.name)
    println("Flavor:            " + variant.flavorName)

    if (buildType == "release" || buildType == "nightly") {
        def baseVersionCode = generatedVersionCode

        // The Google Play Store does not allow multiple APKs for the same app that all have the
        // same version code. Therefore we need to have different version codes for our ARM and x86
        // builds.

        // Our generated version code now has a length of 9 (See tools/gradle/versionCode.gradle).
        // Our x86 builds need a higher version code to avoid installing ARM builds on an x86 device
        // with ARM compatibility mode.

        variant.outputs.each { output ->
            def abi = output.getFilter(OutputFile.ABI)
            // We use the same version code generator, that we inherited from Fennec, across all channels - even on
            // channels that never shipped a Fennec build.

            def versionCodeOverride = baseVersionCode

            if (abi == "x86_64") {
                versionCodeOverride = versionCodeOverride + 3
            } else if (abi == "x86") {
                versionCodeOverride = versionCodeOverride + 2
            } else if (abi == "arm64-v8a") {
                versionCodeOverride = versionCodeOverride + 1
            } else if (abi == "armeabi-v7a") {
                versionCodeOverride = versionCodeOverride + 0
            } else {
                throw new RuntimeException("Unknown ABI: " + abi)
            }

            output.versionCodeOverride = versionCodeOverride

            println("versionCode for $abi = $versionCodeOverride")
        }

    }
}

// -------------------------------------------------------------------------------------------------
// Generate blocklists
// -------------------------------------------------------------------------------------------------

def blockListOutputDir = 'src/main/res/raw'

task buildBlocklists(type:Copy) {
    from('../shavar-prod-lists') {
        include '*.json'
    }
    into blockListOutputDir

    // Android can't handle dashes in the filename, so we need to rename:
    rename 'disconnect-blacklist.json', 'blocklist.json'
    rename 'disconnect-entitylist.json', 'entitylist.json'
    rename { String filename ->
        return filename.replaceAll("-", "_").toLowerCase()
    }
}

clean.doLast {
    delete fileTree(blockListOutputDir) {
        include '**/*.json'
    }
}

tasks.whenTaskAdded { task ->
    def name = task.name
    if (name.contains("generate") && name.contains("Config")) {
        task.dependsOn buildBlocklists
    }
}

// -------------------------------------------------------------------------------------------------
// Adjust: Read token from locale file if it exists (Only release builds)
// -------------------------------------------------------------------------------------------------

android.applicationVariants.all { variant ->
    def variantName = variant.getName()

    print("Adjust token: ")

    if (variantName.contains("Release") && variantName.contains("focus")) {
        try {
            def token = new File("${rootDir}/.adjust_token").text.trim()
            buildConfigField 'String', 'ADJUST_TOKEN', '"' + token + '"'
            println "(Added from .adjust_token file)"
        } catch (FileNotFoundException ignored) {
            buildConfigField 'String', 'ADJUST_TOKEN', 'null'
            println("X_X")
        }
    } else {
        buildConfigField 'String', 'ADJUST_TOKEN', 'null'
        println("--")
    }
}

// -------------------------------------------------------------------------------------------------
// Sentry: Read token from locale file if it exists (Only release builds)
// -------------------------------------------------------------------------------------------------

android.applicationVariants.all {
    print("Sentry token: ")
    try {
        def token = new File("${rootDir}/.sentry_token").text.trim()
        buildConfigField 'String', 'SENTRY_TOKEN', '"' + token + '"'
        println "(Added from .sentry_token file)"
    } catch (FileNotFoundException ignored) {
        buildConfigField 'String', 'SENTRY_TOKEN', '""'
        println("X_X")
    }
}

// -------------------------------------------------------------------------------------------------
// L10N: Generate list of locales
// Focus provides its own (Android independent) locale switcher. That switcher requires a list
// of locale codes. We generate that list here to avoid having to manually maintain a list of locales:
// -------------------------------------------------------------------------------------------------

def getEnabledLocales() {
    def resDir = file('src/main/res')

    def potentialLanguageDirs = resDir.listFiles(new FilenameFilter() {
        @Override
        boolean accept(File dir, String name) {
            return name.startsWith("values-")
        }
    })

    def langs = potentialLanguageDirs.findAll {
        // Only select locales where strings.xml exists
        // Some locales might only contain e.g. sumo URLS in urls.xml, and should be skipped (see es vs es-ES/es-MX/etc)
        return  file(new File(it, "strings.xml")).exists()
    } .collect {
        // And reduce down to actual values-* names
        return it.name
    } .collect {
        return it.substring("values-".length())
    } .collect {
        if (it.length() > 3 && it.contains("-r")) {
            // Android resource dirs add an "r" prefix to the region - we need to strip that for java usage
            // Add 1 to have the index of the r, without the dash
            def regionPrefixPosition = it.indexOf("-r") + 1

            return it.substring(0, regionPrefixPosition) + it.substring(regionPrefixPosition + 1)
        } else {
            return it
        }
    }.collect {
        return '"' + it + '"'
    }

    // en-US is the default language (in "values") and therefore needs to be added separately
    langs << "\"en-US\""

    return langs.sort { it }
}

def generatedLocaleListDir = 'src/main/java/org/mozilla/focus/generated'
def generatedLocaleListFilename = 'LocaleList.java'

task generateLocaleList {
    doLast {
        def dir = file(generatedLocaleListDir)
        dir.mkdir()
        def localeList = file(new File(dir, generatedLocaleListFilename))

        localeList.delete()
        localeList.createNewFile()
        localeList << "package org.mozilla.focus.generated;" << "\n" << "\n"
        localeList << "import java.util.Arrays;" << "\n"
        localeList << "import java.util.Collections;" << "\n"
        localeList << "import java.util.List;" << "\n"
        localeList << "\n"
        localeList << "public class LocaleList {" << "\n"
        // findbugs doesn't like "public static final String[]", see http://findbugs.sourceforge.net/bugDescriptions.html#MS_MUTABLE_ARRAY
        localeList << "    public static final List<String> BUNDLED_LOCALES = Collections.unmodifiableList(Arrays.asList(new String[] { "
        localeList << getEnabledLocales().join(", ") + " }));" << "\n"
        localeList << "}" << "\n"
    }
}

tasks.whenTaskAdded { task ->
    if (name.contains("compile")) {
        task.dependsOn generateLocaleList
    }
}

clean.doLast {
    file(generatedLocaleListDir).deleteDir()
}

if (project.hasProperty("coverage")) {
    tasks.withType(Test) {
        jacoco.includeNoLocationClasses = true
    }

    android.applicationVariants.all { variant ->
        task "jacoco${variant.name.capitalize()}TestReport"(type: JacocoReport,
                dependsOn: ["test${variant.name.capitalize()}UnitTest"]) {

            reports {
                html.enabled true
                xml.enabled true
            }

            def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                              '**/*Test*.*', 'android/**/*.*', '**/*$[0-9].*']
            def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/${variant.name}", excludes: fileFilter)
            def javaTree = fileTree(dir: "$project.buildDir/intermediates/classes/${variant.flavorName}/${variant.buildType.name}",
                    excludes: fileFilter)
            def mainSrc = "$project.projectDir/src/main/java"
            sourceDirectories = files([mainSrc])
            classDirectories = files([kotlinTree, javaTree])
            executionData = fileTree(dir: project.buildDir, includes: [
                    "jacoco/test${variant.name.capitalize()}UnitTest.exec", 'outputs/code-coverage/connected/*coverage.ec'
            ])
        }
    }

    android {
        buildTypes {
            debug {
                testCoverageEnabled true
                applicationIdSuffix ".coverage"
            }
        }
    }
}
