apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "org.mozilla"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }

    dexOptions {
        preDexLibraries true
    }

    // We have a three dimensional build configuration:
    // BUILD TYPES (debug, beta, release) X PRODUCT FLAVOR (focus, klar) X ENGINE FLAVOR (webkit, gecko(

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        beta {
            initWith debug

            applicationIdSuffix ".beta"
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }

    flavorDimensions "product", "engine"

    productFlavors {
        // In most countries we are Firefox Focus - but in some we need to be Firefox Klar
        focus {
            dimension "product"

            applicationIdSuffix ".focus"
        }
        klar {
            dimension "product"

            applicationIdSuffix ".klar"
        }

        // We can build with two engines: webkit or gecko
        webkit {
            dimension "engine"
        }

        gecko {
            dimension "engine"

            applicationIdSuffix ".gecko"
        }
    }

    variantFilter { variant ->
        def flavors = variant.flavors*.name
        // We only need a gecko debug build for now.
        if (flavors.contains("gecko") && (variant.buildType.name != "debug" || flavors.contains("klar"))) {
            setIgnore(true)
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile 'com.android.support:appcompat-v7:25.1.1'
    compile 'com.android.support:customtabs:25.1.1'
    compile 'com.android.support:design:25.1.1'
    compile 'com.android.support:cardview-v7:25.1.1'
    compile 'com.android.support:recyclerview-v7:25.1.1'

    geckoCompile(name: 'geckoview-195049fabb7a', ext: 'aar')

    testCompile 'junit:junit:4.12'
    testCompile "org.robolectric:robolectric:3.1.4"
    androidTestCompile 'com.android.support.test.espresso:espresso-idling-resource:2.2.2'
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

task buildBlocklists(type:Exec) {
    workingDir '..'

    commandLine 'python', 'build-disconnect.py'
}

tasks.whenTaskAdded { task ->
    def name = task.name
    if (name.contains("generate") && name.contains("Config") && name.contains("Webkit")) {
        task.dependsOn buildBlocklists
    }
}

// -------------------------------------------------------------------------------------------------
// Adjust: Read token from environment variable (Only release builds)
// -------------------------------------------------------------------------------------------------

android.applicationVariants.all { variant ->
    print(variant.getName() + ": ")

    if (variant.getName().contains("Release")) {
        def environmentVariable = variant.getName().contains("klar") ? "ADJUST_TOKEN_KLAR" : "ADJUST_TOKEN_FOCUS"

        def token = System.getenv(environmentVariable) ?: null

        if (token != null) {
            buildConfigField 'String', 'ADJUST_TOKEN', '"' + token + '"'
            println "Added adjust token set from environment variable"
        } else {
            buildConfigField 'String', 'ADJUST_TOKEN', 'null'
            println("Not setting adjust token (environment variable not set)")
        }
    } else {
        buildConfigField 'String', 'ADJUST_TOKEN', 'null'
        println("Not setting adjust token (Not a release build)")
    }
}

// -------------------------------------------------------------------------------------------------
// L10N: Initialize Strings
// -------------------------------------------------------------------------------------------------

task stringsSetup(type:Exec) {
    group = 'Localization'
    description = 'Setup L10N repository for importing and exporting strings.'

    workingDir '..'

    commandLine 'git', 'clone', 'https://github.com/mozilla-l10n/focus-android-l10n.git', 'l10n-repo'
}

// -------------------------------------------------------------------------------------------------
// L10N: Export Strings
// -------------------------------------------------------------------------------------------------

task stringsExport(type:Exec) {
    group = 'Localization'
    description = 'Export strings to L10N repository.'

    workingDir '..'

    commandLine 'python', 'tools/l10n/android2po/a2po.py', 'export'
}

// -------------------------------------------------------------------------------------------------
// L10N: Import Strings
// -------------------------------------------------------------------------------------------------

task stringsImport {
    group = 'Localization'
    description = 'Import strings from L10N repository.'

    doLast {
        exec {
            workingDir '..'
            commandLine 'python', 'tools/l10n/android2po/a2po.py', 'import'
        }
        exec {
            workingDir '../tools/l10n/'
            commandLine 'sh', 'fix_locale_folders.sh'
        }
    }
}

// -------------------------------------------------------------------------------------------------
// L10N: Create commits
// -------------------------------------------------------------------------------------------------

task stringsCommit(type:Exec) {
    group = 'Localization'
    description = 'Create commits for exported strings.'

    workingDir '../tools/l10n/'

    commandLine 'sh', 'create_commits.sh'
}

// -------------------------------------------------------------------------------------------------
// L10N: Clean and update
// -------------------------------------------------------------------------------------------------

task stringsCleanUpdate()  {
    group = 'Localization'
    description = 'Fetch L10N changes and remove all local modifications.'

    doLast {
        exec {
            workingDir '../l10n-repo/'
            commandLine 'git', 'fetch', 'origin'

        }
        exec {
            workingDir '../l10n-repo/'
            commandLine 'git', 'reset', '--hard', 'origin/master'
        }
    }
}
